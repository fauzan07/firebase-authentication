{"version":3,"sources":["assets/loader.gif","config/Fire.js","components/LoginRegister/LoginRegister.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","LoginRegister","props","useState","email","setEmail","password","setPassword","formTitle","setFormTitle","fireErrors","setFireErrors","loginBtn","setLoginBtn","getAction","action","errorNotification","className","role","submitBtn","type","onClick","event","preventDefault","auth","signInWithEmailAndPassword","catch","error","message","createUserWithEmailAndPassword","login_register","htmlFor","id","name","value","placeholder","onChange","target","Home","signOut","App","user","setUser","loading","setLoading","useEffect","authListener","setTimeout","bind","onAuthStateChanged","src","Spinner","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console"],"mappings":"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","file":"static/js/main.96564a7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.f90ea624.gif\";","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyDAD9_ze9D1Tq7GjzosyE9FbqisOhl4lKg\",\n    authDomain: \"fir-authentication-903b0.firebaseapp.com\",\n    databaseURL: \"https://fir-authentication-903b0.firebaseio.com\",\n    projectId: \"fir-authentication-903b0\",\n    storageBucket: \"fir-authentication-903b0.appspot.com\",\n    messagingSenderId: \"553291016443\",\n    appId: \"1:553291016443:web:83316391bef205c99da85e\"\n};\n\nconst fire = firebase.initializeApp(config);\nexport default fire;","import React, { useState, useEffect } from 'react';\nimport fire from '../../config/Fire';\nimport './LoginRegister.css';\n\n\nfunction LoginRegister(props) {\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [formTitle, setFormTitle] = useState('Login');\n  const [fireErrors, setFireErrors] = useState(\"\");\n  const [loginBtn, setLoginBtn] = useState(true);\n\n\n  const login = (event) => {\n    event.preventDefault();\n    fire.auth().signInWithEmailAndPassword(email, password)\n     .catch((error) => {\n        setFireErrors(error.message)\n     })\n  }\n\n  const register = (event) => {\n    event.preventDefault();\n    fire.auth().createUserWithEmailAndPassword(email, password)\n     .catch((error) => {\n        setFireErrors(error.message)\n     })\n  }\n\n  const getAction = action => {\n      if(action === 'reg'){\n            setFormTitle('Register New User');\n            setLoginBtn(false);\n            setFireErrors('');\n      }else{\n            setFormTitle('Login');\n            setLoginBtn(true);\n            setFireErrors('');\n      }\n  }\n\n\n  let errorNotification = fireErrors ? \n  (<div className=\"alert alert-danger\" role=\"alert\">{fireErrors}</div>) : null;\n\n  let submitBtn = loginBtn ?\n  (<button  type=\"submit\" className=\"loginBtn btn btn-success\" onClick={login} >Enter</button>) :\n  (<button  type=\"submit\" className=\"loginBtn btn btn-success\" onClick={register} >Register</button>);\n\n  let login_register = loginBtn ? \n  (<button  className=\"loginBtn btn btn-primary float-right\" onClick={() => getAction('reg')}>Register</button>) :\n  (<button  className=\"loginBtn btn btn-primary float-right\" onClick={() => getAction('login')}>Login</button>);\n\n  return(\n    <div className=\"authentication\">\n    <div className=\"container py-5\">\n        <div className=\"row justify-content-center\">\n            <div className=\"col-md-6 col-lg-6\">\n            <h1 className=\"title\">FIREBASE AUTHENTICATION</h1>\n                <div className=\"mt-5 px-5 py-5 bg-white border shadow-lg rounded signup-box\">\n                <h2 className=\"text-center\">{formTitle}</h2>\n                <div>{errorNotification}</div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email address</label>\n                        <input type=\"text\" className=\"form-control\" id=\"email\" name=\"email\" value={email} placeholder=\"Enter a email\" onChange={(event) => setEmail(event.target.value)}/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"password\" className=\"form-control\" id=\"password\" name=\"password\" value={password} placeholder=\"Enter a password\" onChange={(event) => setPassword(event.target.value)}/>\n                    </div>\n                    {submitBtn}\n                    {login_register}\n                </div>\n            </div>\n        </div>\n    </div>\n    </div>\n  );\n\n}\n\nexport default LoginRegister;\n","import React, { useState, useEffect } from 'react';\nimport fire from '../../config/Fire';\n\n\n\nfunction Home(props) {\n\nconst logout = () => {\n    fire.auth().signOut();\n}\n\n  return(\n    <div className=\"container py-5\">\n        <div className=\"row justify-content-center\">\n            <div className=\"col-md-10\">\n               <h1 className=\"text-center\">Welcome to home</h1>\n               <div className=\"text-center py-5\">\n               <button className=\"btn btn-primary\" onClick={logout}>LogOut</button>\n               </div>\n            </div>\n        </div>\n\n    </div>\n  );\n\n}\n\nexport default Home;\n","import React, { useState, useEffect} from 'react';\nimport fire from './config/Fire';\nimport LoginRegister from './components/LoginRegister/LoginRegister';\nimport Home from './components/Home/Home';\nimport './App.css';\nimport Spinner from './assets/loader.gif';\n\n\nfunction App() {\n\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    authListener();\n    setTimeout(function() {\n      setLoading(false);\n    }.bind(this), 1000)\n  }, []);\n\n\n\n   const authListener = () => {\n    fire.auth().onAuthStateChanged((user) => {\n      if(user){\n        setUser({user});\n      }else{\n        setUser(null);\n      }\n    });\n  }\n\n  if(loading){\n    return(\n      <div className=\"text-center spinner\">\n        <img src={Spinner} alt=\"loading\"/>\n      </div>\n    );\n  }\n  return(\n    <div>\n      {user ? (<Home/>) : (<LoginRegister/>)}\n    </div>\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}